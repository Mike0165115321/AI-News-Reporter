# news_generation.py

import google.generativeai as genai
from core.config import settings
from core.prompts import NEWS_PERSONA_PROMPT

class NewsGenerator:
    def __init__(self, model_name: str = "gemini-1.5-flash-latest"):
        if not settings.GEMINI_API_KEY:
            raise ValueError("GEMINI_API_KEY is not set in the .env file.")
        
        genai.configure(api_key=settings.GEMINI_API_KEY)
        
        self.model = genai.GenerativeModel(model_name)
        self.prompt_template = NEWS_PERSONA_PROMPT
        print(f"ü§ñ News Generator initialized with model: {model_name}")

    def generate_answer(self, query: str, context: str) -> str:
        """
        ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å Query ‡πÅ‡∏•‡∏∞ Context ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≤
        """
        try:
            prompt = self.prompt_template.format(context_from_rag=context, user_query=query)
            
            print("  - Sending prompt to Gemini API...")
            response = self.model.generate_content(prompt)
            
            if response.parts:
                final_answer = response.text.strip()
                print("  - Successfully received answer from Gemini.")
                return final_answer
            else:
                print("  - ‚ö†Ô∏è Gemini response was empty or blocked.")
                return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ ‡∏≠‡∏≤‡∏à‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"

        except Exception as e:
            print(f"‚ùå Gemini API Error: {e}")
            return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏±‡∏ö AI ‡∏Ñ‡πà‡∏∞"

if __name__ == '__main__':
    try:
        generator = NewsGenerator()
        
        test_context = """
--- ‡∏Ç‡πà‡∏≤‡∏ß‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á 1 ---
‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: Apple ‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡∏ä‡∏¥‡∏õ M4 ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô iPad Pro, ‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤ M2 ‡∏ñ‡∏∂‡∏á 50%
‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß: TechCrunch
URL: http://example.com/m4
‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤: Apple ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡∏ä‡∏¥‡∏õ M4 ‡∏ó‡∏µ‡πà‡∏ú‡∏•‡∏¥‡∏ï‡∏ö‡∏ô‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡∏Å‡∏£‡∏£‡∏° 3nm ‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á ‡∏°‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏° Neural Engine ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ‡∏°‡∏≤ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏î‡πâ 38 ‡∏•‡πâ‡∏≤‡∏ô‡∏•‡πâ‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≠‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏á‡∏≤‡∏ô AI ‡πÅ‡∏•‡∏∞ Machine Learning

--- ‡∏Ç‡πà‡∏≤‡∏ß‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á 2 ---
‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: iPad Pro ‡∏£‡∏∏‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ö‡∏≤‡∏á‡πÄ‡∏â‡∏µ‡∏¢‡∏ö ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏≠ Tandem OLED ‡∏™‡∏∏‡∏î‡∏•‡πâ‡∏≥
‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß: The Verge
URL: http://example.com/ipad
‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤: ‡∏ô‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ä‡∏¥‡∏õ M4 ‡πÅ‡∏•‡πâ‡∏ß iPad Pro ‡πÉ‡∏´‡∏°‡πà‡∏¢‡∏±‡∏á‡∏°‡∏≤‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ Ultra Retina XDR ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ Tandem OLED ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏™‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏° ‡∏ï‡∏±‡∏ß‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ö‡∏≤‡∏á‡πÄ‡∏ö‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ì‡πå
"""
        test_query = "‡∏ä‡∏¥‡∏õ M4 ‡∏Ç‡∏≠‡∏á Apple ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡∏°‡πà‡∏ö‡πâ‡∏≤‡∏á?"
        
        answer = generator.generate_answer(query=test_query, context=test_context)
        
        print("\n--- Generated Answer ---")
        print(answer)

    except (ValueError, Exception) as e:
        print(f"Error: {e}")